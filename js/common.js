
$(document).ready(function () {
    /*
     * $1 sliders
     * $2 tabs
     * $3 onScroll ipad animation
     * $4 before after effect
     * $5 onScroll slider Icons animation
     * $6 WowJs
     * */

    //$1
    var scene = $('#scene').get(0);

    var parallax = new Parallax(scene);



});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
